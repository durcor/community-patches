diff --git a/MAINTAINERS b/MAINTAINERS
index e8aedeb71f9e..f5cb49bea5d2 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -7105,7 +7105,7 @@ F:	Documentation/locking/*futex*
 F:	include/asm-generic/futex.h
 F:	include/linux/futex.h
 F:	include/uapi/linux/futex.h
-F:	kernel/futex.c
+F:	kernel/futex*
 F:	tools/perf/bench/futex*
 F:	Documentation/locking/*futex*
 
diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index d8f8a1a69ed1..f7a263f1ca98 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -443,3 +443,5 @@
 437	i386	openat2			sys_openat2
 438	i386	pidfd_getfd		sys_pidfd_getfd
 439	i386	faccessat2		sys_faccessat2
+440	i386	futex_wait		sys_futex_wait
+441	i386	futex_wake		sys_futex_wake
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 78847b32e137..310eb1fd9a1e 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -360,6 +360,8 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
+440	common	futex_wait		sys_futex_wait
+441	common	futex_wake		sys_futex_wake
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index b951a87da987..ac8217950f54 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -588,6 +588,13 @@ asmlinkage long sys_get_robust_list(int pid,
 asmlinkage long sys_set_robust_list(struct robust_list_head __user *head,
 				    size_t len);
 
+/* kernel/futex2.c */
+asmlinkage long sys_futex_wait(void __user *uaddr, unsigned long val,
+			       unsigned long flags,
+			       struct __kernel_timespec __user __user *timo);
+asmlinkage long sys_futex_wake(void __user *uaddr, unsigned long nr_wake,
+			       unsigned long flags);
+
 /* kernel/hrtimer.c */
 asmlinkage long sys_nanosleep(struct __kernel_timespec __user *rqtp,
 			      struct __kernel_timespec __user *rmtp);
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index f4a01305d9a6..e3e03350ae76 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -858,8 +858,14 @@ __SYSCALL(__NR_pidfd_getfd, sys_pidfd_getfd)
 #define __NR_faccessat2 439
 __SYSCALL(__NR_faccessat2, sys_faccessat2)
 
+#define __NR_futex_wait 440
+__SYSCALL(__NR_futex_wait, sys_futex_wait)
+
+#define __NR_futex_wake 441
+__SYSCALL(__NR_futex_wake, sys_futex_wake)
+
 #undef __NR_syscalls
-#define __NR_syscalls 440
+#define __NR_syscalls 442
 
 /*
  * 32 bit systems traditionally used different
diff --git a/init/Kconfig b/init/Kconfig
index 0498af567f70..b17b37107f83 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1493,6 +1493,13 @@ config FUTEX
 	  support for "fast userspace mutexes".  The resulting kernel may not
 	  run glibc-based applications correctly.
 
+config FUTEX2
+	bool "Enable futex2 support" if EXPERT
+	depends on FUTEX
+	default n
+	help
+	  Experimental support for futex2 interface.
+
 config FUTEX_PI
 	bool
 	depends on FUTEX && RT_MUTEXES
diff --git a/kernel/Makefile b/kernel/Makefile
index f3218bc5ec69..7698187de0b0 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -55,6 +55,7 @@ obj-$(CONFIG_PROFILING) += profile.o
 obj-$(CONFIG_STACKTRACE) += stacktrace.o
 obj-y += time/
 obj-$(CONFIG_FUTEX) += futex.o
+obj-$(CONFIG_FUTEX2) += futex2.o
 obj-$(CONFIG_GENERIC_ISA_DMA) += dma.o
 obj-$(CONFIG_SMP) += smp.o
 ifneq ($(CONFIG_SMP),y)
diff --git a/kernel/futex2.c b/kernel/futex2.c
new file mode 100644
index 000000000000..e6b300d0cd52
--- /dev/null
+++ b/kernel/futex2.c
@@ -0,0 +1,184 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * futex2 system call interface by Andr√© Almeida <andrealmeid@collabora.com>
+ *
+ * Copyright 2020 Collabora Ltd.
+ */
+
+#include <linux/freezer.h>
+#include <linux/hashtable.h>
+#include <linux/jhash.h>
+#include <linux/sched/wake_q.h>
+#include <linux/spinlock.h>
+#include <linux/syscalls.h>
+
+DECLARE_HASHTABLE(hash_table, 10);
+DEFINE_SPINLOCK(hash_table_lock);
+
+struct futex_data {
+	struct mm_struct *mm;
+	uintptr_t address;
+	struct task_struct *task;
+	struct hlist_node hnode;
+};
+
+/**
+ * futex2_prepare - Check if the user address is valid, prepare internal
+ *                  data and calculate the hash
+ * @uaddr: futex user address
+ * @key:   futex2 internal data for hash table
+ * @hash_key: hash value of this futex
+ *
+ * Return: 0 on success, error code otherwise
+ */
+static int futex2_prepare(void __user *uaddr, struct futex_data *key,
+			  u32 *hash_key)
+{
+	uintptr_t address = (uintptr_t) uaddr;
+
+	/* Checking if uaddr is valid and accessible */
+	if (unlikely((address % sizeof(u32)) != 0))
+		return -EINVAL;
+	if (unlikely(!access_ok(uaddr, sizeof(u32))))
+		return -EFAULT;
+
+	key->address = address;
+	key->mm = current->mm;
+
+	/* Generate hash key for this futex using uaddr and current->mm */
+	*hash_key = jhash2((u32 *) key, offsetof(typeof(*key), task) / 4, 0);
+
+	return 0;
+}
+
+/**
+ * sys_futex_wait - Wait on a futex address if (*uaddr) == val
+ * @uaddr: User address of futex
+ * @val:   Expected value of futex
+ * @flags: TODO
+ * @timo:  TODO
+ */
+SYSCALL_DEFINE4(futex_wait, void __user *, uaddr, unsigned long, val,
+		unsigned long, flags, struct __kernel_timespec __user *, timo)
+{
+	struct futex_data key;
+	u32 value, hash_key;
+	int ret;
+
+	ret = futex2_prepare(uaddr, &key, &hash_key);
+	if (ret)
+		return ret;
+
+	/*
+	 * Get the value from user futex address.
+	 *
+	 * Since we are in a hurry, we use a spin lock and we can't sleep.
+	 * Try to get the value with page fault disabled (when enable, we might
+	 * sleep).
+	 *
+	 * If we fail, we aren't sure if the address is invalid or is just a
+	 * page fault. Then, release the lock (so we can sleep) and try to get
+	 * the value with page fault enabled. If get_user succeeds, this means
+	 * that the address is valid and we do the loop again. Since we just
+	 * handled the page fault, the page is pinned in memory and we should
+	 * be luckier this time and be able to get the value. If we fail again,
+	 * we will try again.
+	 *
+	 * If even with page faults enabled we get and error, this means that
+	 * the address is not valid and we return from the syscall.
+	 */
+	do {
+		// replace global table lock for a per bucket lock
+		spin_lock(&hash_table_lock);
+
+		pagefault_disable();
+		ret = __get_user(value, (u32 *) uaddr);
+		pagefault_enable();
+
+		if (ret) {
+			spin_unlock(&hash_table_lock);
+
+			if (get_user(value, (u32 *) uaddr))
+				return -EFAULT;
+		}
+	} while (ret);
+
+	/* Check if the value is the expected one */
+	if (value != val) {
+		spin_unlock(&hash_table_lock);
+		return -EWOULDBLOCK;
+	}
+
+	/* Add the waiter to the hash table and sleep */
+retry:
+	set_current_state(TASK_INTERRUPTIBLE);
+	hash_add(hash_table, &key.hnode, hash_key);
+	key.task = current;
+	spin_unlock(&hash_table_lock);
+	freezable_schedule();
+
+	/* We woke up */
+	__set_current_state(TASK_RUNNING);
+
+	/*
+	 * Spurious wakeup, let's sleep again. Readd futex in the table
+	 * so we don't lose any wakeup
+	 */
+	if (hash_hashed(&key.hnode) && !signal_pending(current)) {
+		spin_lock(&hash_table_lock);
+		hash_del(&key.hnode);
+		goto retry;
+	}
+
+	return 0;
+}
+
+/**
+ * sys_futex_wake - Wake a number of futexes waiting on an address
+ * @uaddr:   Address of futex to be woken up
+ * @nr_wake: TODO
+ * @flags:   TODO
+ */
+SYSCALL_DEFINE3(futex_wake, void __user *, uaddr, unsigned int, nr_wake,
+		unsigned long, flags)
+{
+	struct futex_data key, *key2;
+	struct task_struct *task;
+	DEFINE_WAKE_Q(wake_q);
+	u32 hash_key;
+	int ret;
+
+	ret = futex2_prepare(uaddr, &key, &hash_key);
+	if (ret)
+		return ret;
+
+	// replace global table lock for a per bucket lock
+	spin_lock(&hash_table_lock);
+
+	/*
+	 * For every futex in the bucket, check if is the same as we are trying
+	 * to wake up. If so, place it in a wake queue and remove it from the
+	 * bucket
+	 */
+	hash_for_each_possible(hash_table, key2, hnode, hash_key) {
+		if (key.address == key2->address && key.mm == key2->mm) {
+			task = key2->task;
+			get_task_struct(task);
+			hash_del(&(key2->hnode));
+			wake_q_add_safe(&wake_q, task);
+			ret++;
+		}
+	}
+
+	spin_unlock(&hash_table_lock);
+	wake_up_q(&wake_q);
+
+	return ret;
+}
+
+static int __init futex2_init(void)
+{
+	hash_init(hash_table);
+	return 0;
+}
+core_initcall(futex2_init);
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index 3b69a560a7ac..f04965322a2e 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -148,6 +148,10 @@ COND_SYSCALL_COMPAT(set_robust_list);
 COND_SYSCALL(get_robust_list);
 COND_SYSCALL_COMPAT(get_robust_list);
 
+/* kernel/futex2.c */
+COND_SYSCALL(futex_wait);
+COND_SYSCALL(futex_wake);
+
 /* kernel/hrtimer.c */
 
 /* kernel/itimer.c */
